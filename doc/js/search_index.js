var search_data = {"index":{"searchIndex":["aicomponent","applicationcontroller","applicationhelper","armycomponent","component","componentbag","damagesystem","energy_cost","energycomponent","energysystem","entity","entityfactory","entitymanager","entitytype","game","gridcomponent","healthcomponent","humancomponent","impassablecomponent","jsonfactory","killsystem","listcomponent","meleeattackcomponent","meleesystem","motioncomponent","motionsystem","movesystem","namecomponent","occupiablecomponent","ownedcomponent","piececomponent","positioncomponent","rangeattackcomponent","rangeattackimmunitycomponent","rangesystem","socketcontroller","staticpagescontroller","staticpageshelper","system","terraincomponent","turncomponent","turnsystem","useridcomponent","[]()","[]()","[]()","actions()","add_component()","adjacent?()","ai_player()","ai_player_entity?()","alive?()","artillery()","artillery()","attack()","attack()","attack=()","attack=()","attack_animate()","attackable_locations()","attackable_locations()","attackable_range()","attackable_range()","board()","can_move?()","command_bunker()","command_bunker()","consume_energy()","create_army()","create_board_basic()","create_game_basic()","cur_energy=()","cur_health=()","current_turn()","current_turn()","current_turn_entities()","current_turn_entities_each()","current_turn_entity?()","damageable_entity?()","debug_entity()","distance()","distance_to()","each_coord()","each_entity()","end_turn()","end_turn()","energized?()","energy_cost=()","energy_entity?()","enough_energy?()","extract_coord()","flatland()","flatland_square()","game_start()","get_all_full_info()","get_all_player_info()","get_all_tile_info()","get_all_unit_info()","get_components()","get_entities_with_components()","get_full_info()","get_player_info()","get_tile_info()","get_unit_actions()","get_unit_info()","get_unit_melee_attacks()","get_unit_moves()","get_unit_ranged_attacks()","goliath()","has_components()","hill()","hill_square()","human_player()","human_player_entity?()","index()","infantry()","infantry()","init_game()","kill_units()","locations()","machine_gun()","machine_gun()","make_move()","max_energy=()","max_health=()","max_movement=()","max_range=()","melee_attack()","melee_attackable_locations()","melee_entity?()","min_range=()","mountain()","mountain_square()","move()","move_unit()","moveable_entity?()","moveable_locations()","moveable_locations()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_turn()","piece()","piece_entity?()","piece_xy()","place_army_bottom_left()","place_army_bottom_right()","place_army_top_left()","place_army_top_right()","place_piece()","placed_entity?()","player()","range_attackable_locations()","range_entity?()","range_immuned_entity?()","ranged_attack()","remove_piece()","reset()","reset_energy()","river()","river_square()","rpc()","square()","square_entity?()","square_path()","test()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","trench()","trench_square()","turn()","turn_entity()","turn_entity?()","update()","update()","update()","update()","update()","update()","update_energy()","update_health()","verify()","minecraftia.fnt","application.js","client_test.js","main.js","gameboard.js","gamegroup.js","uigroup.js","unit.js","unitgroup.js","actions.js","boot.js","gameover.js","menu.js","play.js","preload.js","static_pages.coffee","tiledtest.json","application.css","static_pages.scss","codingpractices","read_me","attacksystemdoc"],"longSearchIndex":["aicomponent","applicationcontroller","applicationhelper","armycomponent","component","componentbag","damagesystem","energy_cost","energycomponent","energysystem","entity","entityfactory","entitymanager","entitytype","game","gridcomponent","healthcomponent","humancomponent","impassablecomponent","jsonfactory","killsystem","listcomponent","meleeattackcomponent","meleesystem","motioncomponent","motionsystem","movesystem","namecomponent","occupiablecomponent","ownedcomponent","piececomponent","positioncomponent","rangeattackcomponent","rangeattackimmunitycomponent","rangesystem","socketcontroller","staticpagescontroller","staticpageshelper","system","terraincomponent","turncomponent","turnsystem","useridcomponent","componentbag#[]()","entitymanager#[]()","gridcomponent#[]()","jsonfactory::actions()","entitymanager#add_component()","motionsystem::adjacent?()","entityfactory::ai_player()","entitytype::ai_player_entity?()","healthcomponent#alive?()","entityfactory::artillery()","piececomponent::artillery()","game::attack()","jsonfactory::attack()","meleeattackcomponent#attack=()","rangeattackcomponent#attack=()","jsonfactory::attack_animate()","meleesystem::attackable_locations()","rangesystem::attackable_locations()","meleesystem::attackable_range()","rangesystem::attackable_range()","jsonfactory::board()","motioncomponent#can_move?()","entityfactory::command_bunker()","piececomponent::command_bunker()","energysystem::consume_energy()","entityfactory::create_army()","entityfactory::create_board_basic()","entityfactory::create_game_basic()","energycomponent#cur_energy=()","healthcomponent#cur_health=()","turncomponent#current_turn()","turnsystem::current_turn()","turnsystem::current_turn_entities()","turnsystem::current_turn_entities_each()","turnsystem::current_turn_entity?()","entitytype::damageable_entity?()","entity::debug_entity()","motionsystem::distance()","positioncomponent#distance_to()","game::each_coord()","entitymanager#each_entity()","game::end_turn()","jsonfactory::end_turn()","energycomponent#energized?()","energy_cost#energy_cost=()","entitytype::energy_entity?()","energysystem::enough_energy?()","game::extract_coord()","terraincomponent::flatland()","entityfactory::flatland_square()","jsonfactory::game_start()","game::get_all_full_info()","game::get_all_player_info()","game::get_all_tile_info()","game::get_all_unit_info()","entitymanager#get_components()","entitymanager#get_entities_with_components()","game::get_full_info()","game::get_player_info()","game::get_tile_info()","game::get_unit_actions()","game::get_unit_info()","game::get_unit_melee_attacks()","game::get_unit_moves()","game::get_unit_ranged_attacks()","entityfactory::goliath()","entitymanager#has_components()","terraincomponent::hill()","entityfactory::hill_square()","entityfactory::human_player()","entitytype::human_player_entity?()","staticpagescontroller#index()","entityfactory::infantry()","piececomponent::infantry()","game::init_game()","jsonfactory::kill_units()","jsonfactory::locations()","entityfactory::machine_gun()","piececomponent::machine_gun()","motionsystem::make_move()","energycomponent#max_energy=()","healthcomponent#max_health=()","motioncomponent#max_movement=()","rangeattackcomponent#max_range=()","game::melee_attack()","jsonfactory::melee_attackable_locations()","entitytype::melee_entity?()","rangeattackcomponent#min_range=()","terraincomponent::mountain()","entityfactory::mountain_square()","jsonfactory::move()","game::move_unit()","entitytype::moveable_entity?()","jsonfactory::moveable_locations()","motionsystem::moveable_locations()","energycomponent::new()","entity::new()","entitymanager::new()","gridcomponent::new()","healthcomponent::new()","listcomponent::new()","meleeattackcomponent::new()","motioncomponent::new()","namecomponent::new()","ownedcomponent::new()","piececomponent::new()","positioncomponent::new()","rangeattackcomponent::new()","terraincomponent::new()","turncomponent::new()","useridcomponent::new()","turncomponent#next_turn()","jsonfactory::piece()","entitytype::piece_entity?()","jsonfactory::piece_xy()","entityfactory::place_army_bottom_left()","entityfactory::place_army_bottom_right()","entityfactory::place_army_top_left()","entityfactory::place_army_top_right()","entityfactory::place_piece()","entitytype::placed_entity?()","jsonfactory::player()","jsonfactory::range_attackable_locations()","entitytype::range_entity?()","entitytype::range_immuned_entity?()","game::ranged_attack()","motionsystem::remove_piece()","energycomponent#reset()","energysystem::reset_energy()","terraincomponent::river()","entityfactory::river_square()","socketcontroller#rpc()","jsonfactory::square()","entitytype::square_entity?()","jsonfactory::square_path()","game::test()","armycomponent#to_s()","component#to_s()","componentbag#to_s()","energycomponent#to_s()","entitymanager#to_s()","gridcomponent#to_s()","healthcomponent#to_s()","listcomponent#to_s()","meleeattackcomponent#to_s()","motioncomponent#to_s()","namecomponent#to_s()","ownedcomponent#to_s()","piececomponent#to_s()","positioncomponent#to_s()","rangeattackcomponent#to_s()","system#to_s()","terraincomponent#to_s()","turncomponent#to_s()","useridcomponent#to_s()","terraincomponent::trench()","entityfactory::trench_square()","jsonfactory::turn()","entityfactory::turn_entity()","entitytype::turn_entity?()","damagesystem::update()","killsystem::update()","meleesystem::update()","movesystem::update()","rangesystem::update()","turnsystem::update()","jsonfactory::update_energy()","jsonfactory::update_health()","game::verify()","","","","","","","","","","","","","","","","","","","","","",""],"info":[["AIComponent","","AIComponent.html","","<p>The AIComponent specifies whether a given entity is controlled by\nartificial intelligence. For example, …\n"],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["ArmyComponent","","ArmyComponent.html","",""],["Component","","Component.html","","<p>This is the base class for ecs components.\n<p>Components can be considered as “columns” of the …\n"],["ComponentBag","","ComponentBag.html","","<p>The ComponentBag is used within the EntityManager. It is responsible for\nstoring the different components …\n"],["DamageSystem","","DamageSystem.html","","<p>The Damage System checks entities with health and damage components,\nsubtracting the damage represented …\n"],["ENERGY_COST","","ENERGY_COST.html","","<p>This module consolidates all energy-consumption related information. Any\ncomponent that describes an …\n"],["EnergyComponent","","EnergyComponent.html","","<p>The EnergyComponent is responsible for managing a wide range of actions.\nActions such as movement, attack, …\n"],["EnergySystem","","EnergySystem.html","","<p>The EnergySystem is responsible for managing the energy of pieces. If a\npiece requires energy to perform …\n"],["Entity","","Entity.html","","<p>Entities are the “rows” of the ecs “database table”. They are the objects\nof OOP …\n"],["EntityFactory","","EntityFactory.html","","<p>The EntityFactory is a heavy-lifter along with the EntityManager. It is\nresponsible for creating standard …\n"],["EntityManager","","EntityManager.html","","<p>The EntityManager is the “database table” of the ecs model. It is\nresponsible for mapping entities …\n"],["EntityType","","EntityType.html","","<p>The EntityType provides some syntatic sugar for different System classes.\nIt provides several methods …\n"],["Game","","Game.html","",""],["GridComponent","","GridComponent.html","","<p>This class specifies a component for entities that contain a 2d grid.\n"],["HealthComponent","","HealthComponent.html","","<p>The HealthComponent is used for entities that have hit points and can\nsustain damage. The component keeps …\n"],["HumanComponent","","HumanComponent.html","","<p>The HumanComponent specifies whether a given entity is controlled by a\nhuman. For example, this component …\n"],["ImpassableComponent","","ImpassableComponent.html","","<p>The ImpassableComponent is used primarily for squares on the board. It\ncontrols whether it is possible …\n"],["JsonFactory","","JsonFactory.html","","<p>#Dir[File.dirname(__FILE__) + &#39;/../component/*.rb&#39;].each {|file|\nrequire_relative file } #Dir[File.dirname(__FILE__) …\n"],["KillSystem","","KillSystem.html","","<p>The KillSystem is responsible for removing entities from the game once they\nhave been killed. In short, …\n"],["ListComponent","","ListComponent.html","",""],["MeleeAttackComponent","","MeleeAttackComponent.html","","<p>The MeleeAttackComponent manages stats concerning melee attacks. Entities\nthat can launch melee attacks …\n"],["MeleeSystem","","MeleeSystem.html","","<p>The MeleeSystem is responsible for coordinating melee attacks. It ensures\nthat the entities can properly …\n"],["MotionComponent","","MotionComponent.html","","<p>The MotionComponent handles stats necessary for movement. In particular,\n"],["MotionSystem","","MotionSystem.html","","<p>The MotionSystem defines several useful methods for handling the movement\nof entities upon a board.  …\n"],["MoveSystem","","MoveSystem.html","","<p>The Move System checks entities with position, motion, and move components,\nand updates an entity&#39;s …\n"],["NameComponent","","NameComponent.html","","<p>The NameComponent is used to give a name to entities. For example, a\nNameComponent might be given to …\n"],["OccupiableComponent","","OccupiableComponent.html","","<p>The OccupiableComponent is a component for squares on a board. It denotes\nwhether other entities can …\n"],["OwnedComponent","","OwnedComponent.html","","<p>The OwnedComponent is used to denote that one entity owns another. For\nexample, an infantry entity might …\n"],["PieceComponent","","PieceComponent.html","","<p>The PieceComponent identifies an entity as an army unit or a piece on the\nboard that a player can control. …\n"],["PositionComponent","","PositionComponent.html","","<p>The PositionComponent denotes the position of an entity on the board. For\nexample, if there were a 20x20 …\n"],["RangeAttackComponent","","RangeAttackComponent.html","","<p>The RangeAttackComponent is responsible for keeping stats pertaining to\nrange attacks. In particular, …\n"],["RangeAttackImmunityComponent","","RangeAttackImmunityComponent.html","","<p>The RangeAttackImmunityComponent grants entities invulnerability to range\nattacks. For example, the command …\n"],["RangeSystem","","RangeSystem.html","","<p>The RangeSystem is responsible for ranged attacks. It finds potential\ntargets for units with ranged attack, …\n"],["SocketController","","SocketController.html","",""],["StaticPagesController","","StaticPagesController.html","",""],["StaticPagesHelper","","StaticPagesHelper.html","",""],["System","","System.html","","<p>Systems are the “sql” to the ecs “database tables”. While entities function\nas “rows” …\n"],["TerrainComponent","","TerrainComponent.html","","<p>TerrainComponent is a major component for the board. It denotes what type\nof terrain will appear on the …\n"],["TurnComponent","","TurnComponent.html","","<p>The TurnComponent is responsible for keeping track of turn information for\nthe game. It contains a list …\n"],["TurnSystem","","TurnSystem.html","","\n<pre>The TurnSystem is responsible for handling turn-related issues. It keeps\ntrack of which player&#39;s turn ...</pre>\n"],["UserIdComponent","","UserIdComponent.html","","<p>The UserIdComponent is used to uniquely identify player entities.\n"],["[]","ComponentBag","ComponentBag.html#method-i-5B-5D","(component_class)","<p>Access the value of a given key creating a new entry if the key is\nundefined\n<p>Arguments\n\n<pre>component_class ...</pre>\n"],["[]","EntityManager","EntityManager.html#method-i-5B-5D","(entity)","<p>Access the value of a given hash creating a new entry if the key is\nundefined\n<p>Arguments\n\n<pre>entity = the key ...</pre>\n"],["[]","GridComponent","GridComponent.html#method-i-5B-5D","(key)",""],["actions","JsonFactory","JsonFactory.html#method-c-actions","(entity_manager, entity, can_move, can_melee, can_range)",""],["add_component","EntityManager","EntityManager.html#method-i-add_component","(entity, component)","<p>Adds a component to an entity.\n<p>Arguments:\n\n<pre>entity    = the entity to add the component to\ncomponent = the ...</pre>\n"],["adjacent?","MotionSystem","MotionSystem.html#method-c-adjacent-3F","(entity_manager, entity, entity2)","<p>Determines whether two entities are adjacent to each other on the board.\nOnly the cardinal directions …\n"],["ai_player","EntityFactory","EntityFactory.html#method-c-ai_player","(entity_manager, name, id=-1)","<p>This function creates a new AI player entity. These entities represent the\nplayers that are controlled …\n"],["ai_player_entity?","EntityType","EntityType.html#method-c-ai_player_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is an ai player\n<p>Arguments\n\n<pre>entity_manager = the manager that holds the entities ...</pre>\n"],["alive?","HealthComponent","HealthComponent.html#method-i-alive-3F","()","<p>Returns whether or not the entity is alive\n"],["artillery","EntityFactory","EntityFactory.html#method-c-artillery","(entity_manager, owner)","<p>This function creates a new AI player etity. These entities represent the\nplayers that are controlled …\n"],["artillery","PieceComponent","PieceComponent.html#method-c-artillery","()",""],["attack","Game","Game.html#method-c-attack","(req_id, em, entity, square, type)",""],["attack","JsonFactory","JsonFactory.html#method-c-attack","(entity_manager, result)","<p>This returns the results of a move command to the frontend. It specifies\nthe entity that moved along …\n"],["attack=","MeleeAttackComponent","MeleeAttackComponent.html#method-i-attack-3D","(attack)","<p>Sets the melee attack to a new attack\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">attack</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">melee</span> <span class=\"ruby-identifier\">attack</span>\n</pre>\n"],["attack=","RangeAttackComponent","RangeAttackComponent.html#method-i-attack-3D","(attack)","<p>Sets attack to a new attack\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">attack</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">attack</span>\n</pre>\n"],["attack_animate","JsonFactory","JsonFactory.html#method-c-attack_animate","(entity_manager, type, attacking_entity, attacker_type, target_row, target_col)","<p>This function converts an attack result information into an rpc for the\nfront end. In particular, it …\n"],["attackable_locations","MeleeSystem","MeleeSystem.html#method-c-attackable_locations","(entity_manager, entity)","<p>Gets the locations that an entity can melee attack\n"],["attackable_locations","RangeSystem","RangeSystem.html#method-c-attackable_locations","(entity_manager, entity)","<p>Get locations that an entity can range attack.\n<p>Arguments\n\n<pre>entity_manager = the manager of the entities\nentity ...</pre>\n"],["attackable_range","MeleeSystem","MeleeSystem.html#method-c-attackable_range","(entity_manager, entity)","<p>Gets the locations that an entity could melee attack in theory\n"],["attackable_range","RangeSystem","RangeSystem.html#method-c-attackable_range","(entity_manager, entity)","<p>Gets locations that an entity could range attack in theory.\n"],["board","JsonFactory","JsonFactory.html#method-c-board","(entity_manager)","<p>Converts the board into a json-ready hash. This method is particularly\nuseful for initialization of the …\n"],["can_move?","MotionComponent","MotionComponent.html#method-i-can_move-3F","()","<p>Whether the entity can move\n"],["command_bunker","EntityFactory","EntityFactory.html#method-c-command_bunker","(entity_manager, owner)","<p>This function creates a new command bunker entity. These entities represent\nthe command base of a player. …\n"],["command_bunker","PieceComponent","PieceComponent.html#method-c-command_bunker","()",""],["consume_energy","EnergySystem","EnergySystem.html#method-c-consume_energy","(entity_manager, entity, energy_used)","<p>Updates an entity to have used a certain amount of energy\n<p>Arguments\n\n<pre>entity_manager = the manager of entities ...</pre>\n"],["create_army","EntityFactory","EntityFactory.html#method-c-create_army","(entity_manager, owner)","<p>This function creates a new army for a player.\n<p>Arguments\n\n<pre>entity_manager = the entity manager to add the ...</pre>\n"],["create_board_basic","EntityFactory","EntityFactory.html#method-c-create_board_basic","(entity_manager)","<p>This function populates the board in the most basic way possible. It fills\neach row and column with a …\n"],["create_game_basic","EntityFactory","EntityFactory.html#method-c-create_game_basic","(entity_manager, player_names)","<p>This function creates all the entities needed for a new basic game\n<p>Arguments\n\n<pre>entity_manager = the entity ...</pre>\n"],["cur_energy=","EnergyComponent","EnergyComponent.html#method-i-cur_energy-3D","(energy)","<p>Sets the current energy to a new energy\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">energy</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">energy</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">set</span> <span class=\"ruby-identifier\">current</span> <span class=\"ruby-identifier\">energy</span> <span class=\"ruby-identifier\">to</span>\n</pre>\n"],["cur_health=","HealthComponent","HealthComponent.html#method-i-cur_health-3D","(health)","<p>Sets the current health to a new health\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">health</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">current</span> <span class=\"ruby-identifier\">health</span>\n</pre>\n"],["current_turn","TurnComponent","TurnComponent.html#method-i-current_turn","()","<p>Returns the player entity whose turn it currently is\n"],["current_turn","TurnSystem","TurnSystem.html#method-c-current_turn","(entity_manager)","<p>Gets the entity for the current player from an entity manager.\n"],["current_turn_entities","TurnSystem","TurnSystem.html#method-c-current_turn_entities","(entity_manager)","<p>Gets an array of each entity belonging to the current player.\n<p>Arguments\n\n<pre>entity_manager = the manager of ...</pre>\n"],["current_turn_entities_each","TurnSystem","TurnSystem.html#method-c-current_turn_entities_each","(entity_manager)","<p>Generates each entity belonging to the current player.\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">entity_manager</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">manager</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">entities</span>\n</pre>\n"],["current_turn_entity?","TurnSystem","TurnSystem.html#method-c-current_turn_entity-3F","(entity_manager, entity)","<p>Determines whether the entity belongs to the current turn&#39;s player.\n<p>Arguments\n\n<pre>entity_manager = the ...</pre>\n"],["damageable_entity?","EntityType","EntityType.html#method-c-damageable_entity-3F","(entity_manager, entity)","<p>Determines whether the entity can take damage (aka be attacked)\n<p>Arguments\n\n<pre>entity_manager = the manager ...</pre>\n"],["debug_entity","Entity","Entity.html#method-c-debug_entity","()","<p>Creates a new Entity for debugging\n<p>Postcondition\n\n<pre>A new entity is created with a string much easier to read. ...</pre>\n"],["distance","MotionSystem","MotionSystem.html#method-c-distance","(entity_manager, entity, entity2)","<p>Gets the (Manhattan) distance between two entities on the board.\n<p>Arguments\n\n<pre>entity_manager = the manager ...</pre>\n"],["distance_to","PositionComponent","PositionComponent.html#method-i-distance_to","(other_position)",""],["each_coord","Game","Game.html#method-c-each_coord","(req_id, em)",""],["each_entity","EntityManager","EntityManager.html#method-i-each_entity","(*component_classes)","<p>An extension of each, yields to a block only those entities that have all\nthe desired component classes. …\n"],["end_turn","Game","Game.html#method-c-end_turn","(req_id, em)","<p>End the turn for the current player.\n"],["end_turn","JsonFactory","JsonFactory.html#method-c-end_turn","(entity_manager, entity)","<p>Converts a turn entity into a hash object.\n<p>Argumetns\n\n<pre>entity_manager = the manager in which the entity is ...</pre>\n"],["energized?","EnergyComponent","EnergyComponent.html#method-i-energized-3F","()","<p>Whether the entity has energy left to use\n"],["energy_cost=","ENERGY_COST","ENERGY_COST.html#method-i-energy_cost-3D","(energy)","<p>Sets the energy cost to a new cost\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">energy</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">energy</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">set</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">cost</span> <span class=\"ruby-identifier\">to</span>\n</pre>\n"],["energy_entity?","EntityType","EntityType.html#method-c-energy_entity-3F","(entity_manager, entity)","<p>Determines whether the entity uses energy. Energy is used to control\nmovement, attack, etc.\n<p>Arguments …\n"],["enough_energy?","EnergySystem","EnergySystem.html#method-c-enough_energy-3F","(entity_manager, entity, energy_cost)","<p>Determines if an entity has enough energy to perform an action.\n<p>Arguments\n\n<pre>entity_manager = the manager ...</pre>\n"],["extract_coord","Game","Game.html#method-c-extract_coord","(location)",""],["flatland","TerrainComponent","TerrainComponent.html#method-c-flatland","()","<p>Getter methods for the class variables\n"],["flatland_square","EntityFactory","EntityFactory.html#method-c-flatland_square","(entity_manager)","<p>This function creates a new flatland square for boards. Flatlands are the\nstandard squares that can both …\n"],["game_start","JsonFactory","JsonFactory.html#method-c-game_start","(entity_manager, players, turn, pieces)","<p>This method is responsible for sending all relevant game start data to the\nfrontend. Once the frontend …\n"],["get_all_full_info","Game","Game.html#method-c-get_all_full_info","(req_id, em)",""],["get_all_player_info","Game","Game.html#method-c-get_all_player_info","(req_id, em)",""],["get_all_tile_info","Game","Game.html#method-c-get_all_tile_info","(req_id, em)",""],["get_all_unit_info","Game","Game.html#method-c-get_all_unit_info","(req_id, em)",""],["get_components","EntityManager","EntityManager.html#method-i-get_components","(entity, component_class)","<p>Gets the components of an entity of a specific class.\n<p>Arguments:\n\n<pre>entity          = the entity to retreive ...</pre>\n"],["get_entities_with_components","EntityManager","EntityManager.html#method-i-get_entities_with_components","(*component_classes)","<p>Returns all entities that contain a given component.\n<p>Arguments:\n\n<pre>*component_class = a list of component ...</pre>\n"],["get_full_info","Game","Game.html#method-c-get_full_info","(req_id, em, row, col)",""],["get_player_info","Game","Game.html#method-c-get_player_info","(req_id, em, name=nil)",""],["get_tile_info","Game","Game.html#method-c-get_tile_info","(req_id, em, row, col)",""],["get_unit_actions","Game","Game.html#method-c-get_unit_actions","(req_id, em, entity)",""],["get_unit_info","Game","Game.html#method-c-get_unit_info","(req_id, em, row, col)",""],["get_unit_melee_attacks","Game","Game.html#method-c-get_unit_melee_attacks","(req_id, em, entity)",""],["get_unit_moves","Game","Game.html#method-c-get_unit_moves","(req_id, em, entity)",""],["get_unit_ranged_attacks","Game","Game.html#method-c-get_unit_ranged_attacks","(req_id, em, entity)",""],["goliath","EntityFactory","EntityFactory.html#method-c-goliath","(entity_manager, owner)","<p>;)\n"],["has_components","EntityManager","EntityManager.html#method-i-has_components","(entity, components)","<p>Returns whether an entity has a list of components\n<p>Arguments:\n\n<pre>entity          = the entity to check\ncomponents ...</pre>\n"],["hill","TerrainComponent","TerrainComponent.html#method-c-hill","()",""],["hill_square","EntityFactory","EntityFactory.html#method-c-hill_square","(entity_manager)","<p>This function creates a new hill square for boards. Hills are the passable\nand occupiable version of …\n"],["human_player","EntityFactory","EntityFactory.html#method-c-human_player","(entity_manager, name, id=-1)","<p>This function creates a new human player entity. These entities represent\nthe human players of the game. …\n"],["human_player_entity?","EntityType","EntityType.html#method-c-human_player_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is a human player\n<p>Arguments\n\n<pre>entity_manager = the manager that holds the entities ...</pre>\n"],["index","StaticPagesController","StaticPagesController.html#method-i-index","()",""],["infantry","EntityFactory","EntityFactory.html#method-c-infantry","(entity_manager, owner)","<p>This function creates a new AI player etity. These entities represent the\nplayers that are controlled …\n"],["infantry","PieceComponent","PieceComponent.html#method-c-infantry","()","<p>Getter methods for the class instance variables\n"],["init_game","Game","Game.html#method-c-init_game","(rows=10, cols=10, player_names=[\"Player 1\", \"Player 2\"])",""],["kill_units","JsonFactory","JsonFactory.html#method-c-kill_units","(entity_manager, units_array)","<p>This method produces a message for the frontend to kill a set of units.\n<p>Arguments\n\n<pre>entity_manager = the ...</pre>\n"],["locations","JsonFactory","JsonFactory.html#method-c-locations","(entity_manager, entity, locations, type)","<p>This is the helper function that performs the main work for requests to\ndetermine where a unit can move …\n"],["machine_gun","EntityFactory","EntityFactory.html#method-c-machine_gun","(entity_manager, owner)","<p>This function creates a new AI player etity. These entities represent the\nplayers that are controlled …\n"],["machine_gun","PieceComponent","PieceComponent.html#method-c-machine_gun","()",""],["make_move","MotionSystem","MotionSystem.html#method-c-make_move","(entity_manager, entity, new_square)","<p>Moves an entity from its original location to a new square\n<p>Arguments\n\n<pre>entity_manager = the manager of entities ...</pre>\n"],["max_energy=","EnergyComponent","EnergyComponent.html#method-i-max_energy-3D","(energy)","<p>Sets the max energy to a new energy\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">energy</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">energy</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">set</span> <span class=\"ruby-identifier\">base</span> <span class=\"ruby-identifier\">energy</span> <span class=\"ruby-identifier\">to</span>\n</pre>\n"],["max_health=","HealthComponent","HealthComponent.html#method-i-max_health-3D","(health)","<p>Sets the max_health to a new max\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">health</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">max</span> <span class=\"ruby-identifier\">health</span>\n</pre>\n"],["max_movement=","MotionComponent","MotionComponent.html#method-i-max_movement-3D","(movement)","<p>Sets the max movement to a new movement\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">movement</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">movement</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">set</span> <span class=\"ruby-identifier\">max</span> <span class=\"ruby-identifier\">movement</span> <span class=\"ruby-identifier\">to</span>\n</pre>\n"],["max_range=","RangeAttackComponent","RangeAttackComponent.html#method-i-max_range-3D","(range)","<p>Sets max_range to a new max_range\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">range</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">max_range</span>\n</pre>\n"],["melee_attack","Game","Game.html#method-c-melee_attack","(req_id, em, entity, row, col)",""],["melee_attackable_locations","JsonFactory","JsonFactory.html#method-c-melee_attackable_locations","(entity_manager, melee_entity, locations)","<p>This function is used to return a response to a melee_attackable_locations\nrequest. In particular, it …\n"],["melee_entity?","EntityType","EntityType.html#method-c-melee_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is capable of performing melee attacks\n<p>Arguments\n\n<pre>entity_manager = the manager ...</pre>\n"],["min_range=","RangeAttackComponent","RangeAttackComponent.html#method-i-min_range-3D","(range)","<p>Sets min_range to a new min_range\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">range</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">new</span> <span class=\"ruby-identifier\">min_range</span>\n</pre>\n"],["mountain","TerrainComponent","TerrainComponent.html#method-c-mountain","()",""],["mountain_square","EntityFactory","EntityFactory.html#method-c-mountain_square","(entity_manager)","<p>This function creates a new mountain square for boards. Mountains are\nrugged squares that are unoccupiable …\n"],["move","JsonFactory","JsonFactory.html#method-c-move","(entity_manager, moving_entity, path)","<p>This returns the results of a move command to the frontend. It specifies\nthe entity that moved along …\n"],["move_unit","Game","Game.html#method-c-move_unit","(req_id, em, entity, location)",""],["moveable_entity?","EntityType","EntityType.html#method-c-moveable_entity-3F","(entity_manager, entity)","<p>Determines whether the entity can move. Namely, it needs to have both a\nposition on the board and a  …\n"],["moveable_locations","JsonFactory","JsonFactory.html#method-c-moveable_locations","(entity_manager, moving_entity, locations)","<p>This function is used to return a response to a moveable_locations request.\nIn particular, it contains …\n"],["moveable_locations","MotionSystem","MotionSystem.html#method-c-moveable_locations","(entity_manager, entity)","<p>This function determines what locations are possible for an entity to move\nto.\n<p>Arguments\n\n<pre>entity_manager ...</pre>\n"],["new","EnergyComponent","EnergyComponent.html#method-c-new","(max_energy, cur_energy=max_energy)","<p>Initializes a new EnergyComponent object\n<p>Arguments\n\n<pre>max_energy  = the default energy of the entity\ncur_energy ...</pre>\n"],["new","Entity","Entity.html#method-c-new","(string=nil)","<p>Initializes a new Entity\n<p>Postcondition\n\n<pre>A new entity is created. It is represented as a uuid string to ensure ...</pre>\n"],["new","EntityManager","EntityManager.html#method-c-new","(row, col)","<p>Initializes a new EntityManager\n<p>Arguments\n\n<pre>row = the number of rows that the board will have\ncol = the number ...</pre>\n"],["new","GridComponent","GridComponent.html#method-c-new","(rows, columns)",""],["new","HealthComponent","HealthComponent.html#method-c-new","(max_health, cur_health=max_health)","<p>Initializes a new HealthComponent object\n<p>Arguments\n\n<pre>max_health = the maximum health the entity can have ...</pre>\n"],["new","ListComponent","ListComponent.html#method-c-new","()",""],["new","MeleeAttackComponent","MeleeAttackComponent.html#method-c-new","(attack, energy_cost=1)","<p>Initializes a new MeleeAttackComponent object\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">attack</span> = <span class=\"ruby-identifier\">damage</span> <span class=\"ruby-identifier\">dealt</span> <span class=\"ruby-identifier\">during</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">melee</span> <span class=\"ruby-identifier\">attack</span>\n</pre>\n"],["new","MotionComponent","MotionComponent.html#method-c-new","(max_movement, energy_cost=1)","<p>Initializes a new MotionComponent object\n<p>Arguments\n\n<pre>max_movement = the maximum reach of the entity\nenergy_cost ...</pre>\n"],["new","NameComponent","NameComponent.html#method-c-new","(name)","<p>Initializes a new NameComponent object\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">name</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">name</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">entity</span>\n</pre>\n"],["new","OwnedComponent","OwnedComponent.html#method-c-new","(owner)","<p>Initializes a new OwnedComponent object\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">owner</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">owner</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">entity</span>\n</pre>\n"],["new","PieceComponent","PieceComponent.html#method-c-new","(type)","<p>Initializes a new UnitComponent object\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">type</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">type</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">unit</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">piece</span> <span class=\"ruby-identifier\">is</span>\n</pre>\n"],["new","PositionComponent","PositionComponent.html#method-c-new","(row, col)","<p>Initializes a new PositionComponent object\n<p>Arguments\n\n<pre>row = the row index of the entity on the board\ncol ...</pre>\n"],["new","RangeAttackComponent","RangeAttackComponent.html#method-c-new","(attack, min_range, max_range, splash=[1.0], energy_cost=1)","<p>Initializes a new RangeAttackComponent object\n<p>Arguments\n\n<pre>attack    = the amount of damage done for the range ...</pre>\n"],["new","TerrainComponent","TerrainComponent.html#method-c-new","(type)","<p>Initializes a new TerrainComponent object\n<p>Arguments\n\n<pre>type = the type of terrain (river, mountain, etc.)</pre>\n"],["new","TurnComponent","TurnComponent.html#method-c-new","(player_entities)","<p>Initializes a new TurnComponent object\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">player_entities</span> = <span class=\"ruby-identifier\">an</span> <span class=\"ruby-identifier\">array</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">player</span> <span class=\"ruby-identifier\">entities</span>\n</pre>\n"],["new","UserIdComponent","UserIdComponent.html#method-c-new","(id)","<p>Initializes a new NameComponent object\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">name</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">name</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">entity</span>\n</pre>\n"],["next_turn","TurnComponent","TurnComponent.html#method-i-next_turn","()","<p>Ends the turn for the current player and moves to the next player&#39;s\nturn.\n<p>Postcondtion\n\n<pre>The old player&#39;s ...</pre>\n"],["piece","JsonFactory","JsonFactory.html#method-c-piece","(entity_manager, entity)","<p>This method is responsible for converting a piece entity into a json- ready\nhash. In short, a piece is …\n"],["piece_entity?","EntityType","EntityType.html#method-c-piece_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is a piece on the board such as infantry,\nmachine_gun, artillery, or command_bunker. …\n"],["piece_xy","JsonFactory","JsonFactory.html#method-c-piece_xy","(entity_manager, entity)","<p>This method is similar to square_path but converts a unit to its x, y\ncoordinates.\n<p>Argumetns\n\n<pre>entity_manager ...</pre>\n"],["place_army_bottom_left","EntityFactory","EntityFactory.html#method-c-place_army_bottom_left","(entity_manager, army_array)","<p>This function places an army in the 5x5 bottom left corner\n<p>Arguments\n\n<pre>entity_manager = the entity manager ...</pre>\n"],["place_army_bottom_right","EntityFactory","EntityFactory.html#method-c-place_army_bottom_right","(entity_manager, army_array)","<p>This function places an army in the 5x5 bottom right corner\n<p>Arguments\n\n<pre>entity_manager = the entity manager ...</pre>\n"],["place_army_top_left","EntityFactory","EntityFactory.html#method-c-place_army_top_left","(entity_manager, army_array)","<p>This function places an army in the 5x5 top left corner\n<p>Arguments\n\n<pre>entity_manager = the entity manager to ...</pre>\n"],["place_army_top_right","EntityFactory","EntityFactory.html#method-c-place_army_top_right","(entity_manager, army_array)","<p>This function places an army in the 5x5 top right corner\n<p>Arguments\n\n<pre>entity_manager = the entity manager ...</pre>\n"],["place_piece","EntityFactory","EntityFactory.html#method-c-place_piece","(entity_manager, piece, row, col)","<p>This function places a piece on the board\n<p>Arguments\n\n<pre>entity_manager = the entity manager to add the new ...</pre>\n"],["placed_entity?","EntityType","EntityType.html#method-c-placed_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is placed on the board. Namely it needs to\nhave a position.\n<p>Arguments\n\n<pre>entity_manager ...</pre>\n"],["player","JsonFactory","JsonFactory.html#method-c-player","(entity_manager, entity)","<p>Converts a player entity into a hash object.\n<p>Argumetns\n\n<pre>entity_manager = the manager in which the entity ...</pre>\n"],["range_attackable_locations","JsonFactory","JsonFactory.html#method-c-range_attackable_locations","(entity_manager, range_entity, locations)","<p>This function is used to return a response to a range_attackble_locations\nrequest. In particular, it …\n"],["range_entity?","EntityType","EntityType.html#method-c-range_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is capable of performing range attacks\n<p>Arguments\n\n<pre>entity_manager = the manager ...</pre>\n"],["range_immuned_entity?","EntityType","EntityType.html#method-c-range_immuned_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is impervious to range attacks\n<p>Arguments\n\n<pre>entity_manager = the manager that ...</pre>\n"],["ranged_attack","Game","Game.html#method-c-ranged_attack","(req_id, em, entity, row, col)",""],["remove_piece","MotionSystem","MotionSystem.html#method-c-remove_piece","(entity_manager, entity)","<p>Removes a piece from the board\n<p>Arguments\n\n<pre>entity_manager = the manager of entities\nentity         = the ...</pre>\n"],["reset","EnergyComponent","EnergyComponent.html#method-i-reset","()","<p>Resets the current energy to the max energy.\n"],["reset_energy","EnergySystem","EnergySystem.html#method-c-reset_energy","(entity_manager)","<p>Updates an entity to have used a certain amount of energy\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">entity_manager</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">manager</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">entities</span>\n</pre>\n"],["river","TerrainComponent","TerrainComponent.html#method-c-river","()",""],["river_square","EntityFactory","EntityFactory.html#method-c-river_square","(entity_manager)","<p>This function creates a new river square for boards. Rivers are protective\nbarriers similar to mountains. …\n"],["rpc","SocketController","SocketController.html#method-i-rpc","()",""],["square","JsonFactory","JsonFactory.html#method-c-square","(entity_manager, entity)","<p>Converts a square entity into a hash object.\n<p>Arguments\n\n<pre>entity_manager = the manager in which the entity ...</pre>\n"],["square_entity?","EntityType","EntityType.html#method-c-square_entity-3F","(entity_manager, entity)","<p>Determines whether the entity is a square of a board\n<p>Arguments\n\n<pre>entity_manager = the manager that holds ...</pre>\n"],["square_path","JsonFactory","JsonFactory.html#method-c-square_path","(entity_manager, entity)","<p>This converts a square entity into a json-ready hash. In particular, this\nwill be used for requests such …\n"],["test","Game","Game.html#method-c-test","(req_id, em)",""],["to_s","ArmyComponent","ArmyComponent.html#method-i-to_s","()",""],["to_s","Component","Component.html#method-i-to_s","()","<p>A default to_s, simply return the name of the component. Children who\ndefine major state should override …\n"],["to_s","ComponentBag","ComponentBag.html#method-i-to_s","()","<p>Returns a string representation of the component bag\n"],["to_s","EnergyComponent","EnergyComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","EntityManager","EntityManager.html#method-i-to_s","()","<p>For debugging purposes, converts the manager to a string\n"],["to_s","GridComponent","GridComponent.html#method-i-to_s","()",""],["to_s","HealthComponent","HealthComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","ListComponent","ListComponent.html#method-i-to_s","()",""],["to_s","MeleeAttackComponent","MeleeAttackComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","MotionComponent","MotionComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","NameComponent","NameComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","OwnedComponent","OwnedComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","PieceComponent","PieceComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","PositionComponent","PositionComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","RangeAttackComponent","RangeAttackComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","System","System.html#method-i-to_s","()","<p>Returns a string representation of the System for easy viewing.\n"],["to_s","TerrainComponent","TerrainComponent.html#method-i-to_s","()","<p>Default to_string method\n"],["to_s","TurnComponent","TurnComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["to_s","UserIdComponent","UserIdComponent.html#method-i-to_s","()","<p>Returns a string representation of the component\n"],["trench","TerrainComponent","TerrainComponent.html#method-c-trench","()",""],["trench_square","EntityFactory","EntityFactory.html#method-c-trench_square","(entity_manager)","<p>This function creates a new trench square for boards. Trenches are dug from\nthe terrain by units and …\n"],["turn","JsonFactory","JsonFactory.html#method-c-turn","(entity_manager, entity)","<p>Converts a turn entity into a hash object.\n<p>Argumetns\n\n<pre>entity_manager = the manager in which the entity is ...</pre>\n"],["turn_entity","EntityFactory","EntityFactory.html#method-c-turn_entity","(entity_manager, players)","<p>This function creates a new turn entity. These entities are responsible for\nmanaging information about …\n"],["turn_entity?","EntityType","EntityType.html#method-c-turn_entity-3F","(entity_manager, entity)","<p>Determines whether the entity controls the turn information\n<p>Arguments\n\n<pre>entity_manager = the manager that ...</pre>\n"],["update","DamageSystem","DamageSystem.html#method-c-update","(entity_manager)",""],["update","KillSystem","KillSystem.html#method-c-update","(entity_manager, entity)","<p>This function checks an entity to determine whether it has died. If so, it\nremoves the entity completely …\n"],["update","MeleeSystem","MeleeSystem.html#method-c-update","(entity_manager, entity1, entity2)","<p>This function performs a melee attack. Entity1 attacks entity2. If entity2\nis still alive, it will also …\n"],["update","MoveSystem","MoveSystem.html#method-c-update","(entity_manager)",""],["update","RangeSystem","RangeSystem.html#method-c-update","(entity_manager, entity1, entity2)","<p>Executes a ranged attack from entity1 onto entity2.\n<p>Arguments\n\n<pre>entity_manager = the manager of entities ...</pre>\n"],["update","TurnSystem","TurnSystem.html#method-c-update","(entity_manager)","<p>Updates to the next turn.\n<p>Arguments\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">entity_manager</span> = <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">manager</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">entities</span>\n</pre>\n"],["update_energy","JsonFactory","JsonFactory.html#method-c-update_energy","(entity_manager, entity)","<p>This method sends a request to the frontend to update energy.\n<p>Arguments\n\n<pre>entity_manager = the manager of ...</pre>\n"],["update_health","JsonFactory","JsonFactory.html#method-c-update_health","(entity_manager, entity)","<p>This method sends a request to the frontend to update health.\n<p>Arguments\n\n<pre>entity_manager = the manager of ...</pre>\n"],["verify","Game","Game.html#method-c-verify","(req_id, em, entity)",""],["minecraftia.fnt","","app/assets/images/minecraftia_fnt.html","","<p>&lt;font&gt;\n\n<pre>&lt;info face=&quot;minecraftia&quot; size=&quot;72&quot; bold=&quot;0&quot; italic=&quot;0&quot; charset=&quot;&quot; unicode=&quot;&quot; stretchH=&quot;100&quot; ...</pre>\n"],["application.js","","app/assets/javascripts/application_js.html","","<p>// This is a manifest file that&#39;ll be compiled into application.js,\nwhich will include all the files …\n"],["client_test.js","","app/assets/javascripts/client_test_js.html","","<p>$(document).ready(function() {\n\n<pre>var dispatcher = new WebSocketRails(&#39;localhost:3000/websocket&#39;);\n\n// subscribe ...</pre>\n"],["main.js","","app/assets/javascripts/game/main_js.html","","<p>&#39;use strict&#39;;\n<p>window.onload = function () {\n\n<pre>var constants = {\n    WIDTH: 960,\n    HEIGHT: 960, ...</pre>\n"],["GameBoard.js","","app/assets/javascripts/game/prefabs/GameBoard_js.html","","<p>&#39;use strict&#39;;\n<p>var HIGHLIGHT_TYPES = {\n\n<pre>move: 51,\nattack: 52,\nspecial: 53</pre>\n"],["GameGroup.js","","app/assets/javascripts/game/prefabs/GameGroup_js.html","","<p>&#39;use strict&#39;;\n<p>var GameGroup = function(game, parent) {\n\n<pre>Phaser.Group.call(this, game, parent);\n ...</pre>\n"],["UIGroup.js","","app/assets/javascripts/game/prefabs/UIGroup_js.html","","<p>&#39;use strict&#39;;\n<p>var COLORS = {\n\n<pre>HEALTH: 0x7eb041,\nENERGY: 0xfbb829,\nBUTTON: 0x556270,\nDEPLETED: 0xdadfe6</pre>\n"],["Unit.js","","app/assets/javascripts/game/prefabs/Unit_js.html","","<p>&#39;use strict&#39;;\n<p>var ORIENTATION_MAP = {\n\n<pre>down: 1,\nleft: 4,\nright: 7,\nup: 10</pre>\n"],["UnitGroup.js","","app/assets/javascripts/game/prefabs/UnitGroup_js.html","","<p>&#39;use strict&#39;;\n<p>var UnitGroup = function(game, parent) {\n\n<pre>Phaser.Group.call(this, game, parent);\n ...</pre>\n"],["actions.js","","app/assets/javascripts/game/prefabs/actions_js.html","","<p>function AnimationAction(sprite, anim) {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span>.<span class=\"ruby-identifier\">sprite</span> = <span class=\"ruby-identifier\">sprite</span>;\n<span class=\"ruby-identifier\">this</span>.<span class=\"ruby-identifier\">anim</span> = <span class=\"ruby-identifier\">anim</span>;\n</pre>\n<p>}\n"],["boot.js","","app/assets/javascripts/game/states/boot_js.html","","<p>&#39;use strict&#39;;\n<p>function Boot() { }\n<p>Boot.prototype = {\n"],["gameover.js","","app/assets/javascripts/game/states/gameover_js.html","","<p>&#39;use strict&#39;;\n<p>function GameOver() { }\n<p>GameOver.prototype = {\n"],["menu.js","","app/assets/javascripts/game/states/menu_js.html","","<p>&#39;use strict&#39;;\n<p>function Menu() { }\n<p>Menu.prototype = {\n"],["play.js","","app/assets/javascripts/game/states/play_js.html","","<p>&#39;use strict&#39;;\n<p>function Play() {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span>.<span class=\"ruby-identifier\">sequences</span> = [];\n<span class=\"ruby-identifier\">this</span>.<span class=\"ruby-identifier\">currentSequence</span> = <span class=\"ruby-identifier\">null</span>;\n</pre>\n"],["preload.js","","app/assets/javascripts/game/states/preload_js.html","","<p>&#39;use strict&#39;;\n<p>function Preload() {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span>.<span class=\"ruby-identifier\">asset</span> = <span class=\"ruby-identifier\">null</span>;\n<span class=\"ruby-identifier\">this</span>.<span class=\"ruby-identifier\">ready</span> = <span class=\"ruby-keyword\">false</span>;\n</pre>\n"],["static_pages.coffee","","app/assets/javascripts/static_pages_coffee.html","","<p>Place all the behaviors and hooks related to the matching controller here.\nAll this logic will automatically …\n"],["tiledTest.json","","app/assets/json/tiledTest_json.html","","<p>{ “height”:30,\n\n<pre>&quot;layers&quot;:[\n       {\n        &quot;data&quot;:[12, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, ...</pre>\n"],["application.css","","app/assets/stylesheets/application_css.html","","\n<pre>This is a manifest file that&#39;ll be compiled into application.css, which will include all the files\nlisted ...</pre>\n"],["static_pages.scss","","app/assets/stylesheets/static_pages_scss.html","","<p>// Place all the styles related to the StaticPages controller here. // They\nwill automatically be included …\n"],["CodingPractices","","app/models/ecs/CodingPractices_txt.html","","<p>Preamble:\n\n<pre>This document attempts to highlight key coding practices for this project.\nFeel free to propose ...</pre>\n"],["READ_ME","","app/models/ecs/READ_ME_txt.html","","<p>I have gone through the component and entity folders and done some clean-up\nof the code. Namely:\n\n<pre>1) I ...</pre>\n"],["AttackSystemDoc","","app/models/ecs/system/AttackSystemDoc_txt.html","","<p>This file provides general documentation on the format of attack systems\nand how to create new ones. …\n"]]}}